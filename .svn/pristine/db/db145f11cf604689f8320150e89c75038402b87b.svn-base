package egovframework.main.admin.role.web;

import java.util.List;
import javax.annotation.Resource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import egovframework.main.admin.role.service.RoleService;
import egovframework.main.admin.role.service.RoleVO;
import egovframework.common.response.ApiResponse;

@RestController
@RequestMapping("/role")
public class RoleController {
    private static final Logger logger = LoggerFactory.getLogger(RoleController.class);
    
    @Resource(name = "roleService")
    private RoleService roleService;
    
    @PostMapping("/list")
    public ResponseEntity<ApiResponse<List<RoleVO>>> getGroupAuthryList(@RequestParam String groupId) {
        try {
            List<RoleVO> authryList = roleService.selectGroupAuthryList(groupId);
            return ApiResponse.success(authryList);  // 단순 성공 응답
        } catch (Exception e) {
            logger.error("그룹 권한 목록 조회 중 오류 발생", e);
            return ApiResponse.error("권한 목록 조회 실패");
        }
    }
    
    @PostMapping("/insert")
    public ResponseEntity<ApiResponse<Void>> insertGroupAuthry(RoleVO groupAuthry) {
        try {
            roleService.insertGroupAuthry(groupAuthry);
            return ApiResponse.success(null, "권한이 추가되었습니다.");
        } catch (Exception e) {
            logger.error("그룹 권한 추가 중 오류 발생", e);
            return ApiResponse.error("권한 추가 실패");
        }
    }
    
    @PostMapping("/update")
    public ResponseEntity<ApiResponse<Void>> updateGroupAuthry(RoleVO groupAuthry) {
        try {
        	roleService.updateGroupAuthry(groupAuthry);
            return ApiResponse.success(null, "권한이 수정되었습니다.");
        } catch (Exception e) {
            logger.error("그룹 권한 수정 중 오류 발생", e);
            return ApiResponse.error("권한 수정 실패");
        }
    }
    
    @PostMapping("/delete")
    public ResponseEntity<ApiResponse<Void>> deleteGroupAuthry(RoleVO groupAuthry) {
        try {
            roleService.deleteGroupAuthry(groupAuthry);
            return ApiResponse.success(null, "권한이 삭제되었습니다.");
        } catch (Exception e) {
            logger.error("그룹 권한 삭제 중 오류 발생", e);
            return ApiResponse.error("권한 삭제 실패");
        }
    }
    
    @PostMapping("/delete-all")
    public ResponseEntity<ApiResponse<Void>> deleteAllGroupAuthry(@RequestParam String groupId) {
        try {
            roleService.deleteAllGroupAuthry(groupId);
            return ApiResponse.success(null, "모든 권한이 삭제되었습니다.");
        } catch (Exception e) {
            logger.error("그룹의 모든 권한 삭제 중 오류 발생", e);
            return ApiResponse.error("모든 권한 삭제 실패");
        }
    }
}