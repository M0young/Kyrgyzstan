package egovframework.main.admin.upload.shapefile.service.impl;

import java.io.File;
import java.text.SimpleDateFormat;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import egovframework.rte.fdl.cmmn.EgovAbstractServiceImpl;
import egovframework.main.admin.upload.shapefile.service.ShapefileVO;
import egovframework.main.admin.upload.shapefile.service.ShapefileService;
import egovframework.main.admin.upload.shapefile.service.ShapefileProcessService;
import egovframework.main.admin.upload.progress.service.ProgressVO;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Service("shapefileService")
public class ShapefileServiceImpl extends EgovAbstractServiceImpl implements ShapefileService {
	
	@Resource(name = "shapefileDAO")
	private ShapefileDAO shapefileDAO;
	
	@Resource(name = "shapefileProcessService")
	private ShapefileProcessService shapefileProcessService;

	@Override
	public int createShapefileTable(Map<String, Object> params) {
		return shapefileDAO.createShapefileTable(params);
	}

	@Override
	public int insertShapefileData(Map<String, Object> params) {
		return shapefileDAO.insertShapefileData(params);
	}

	@Override
	public ShapefileVO selectLandUseTypeCode (ShapefileVO shapefileVO) {
		return shapefileDAO.selectLandUseTypeCode(shapefileVO);
	}

	@Override
	public int copyTableToBackup(Map<String, Object> params) {
		return shapefileDAO.copyTableToBackup(params);
	}
	
	@Override
	public int moveTableToBackup(Map<String, Object> params) {
		return shapefileDAO.moveTableToBackup(params);
	}

	@Override
	public boolean checkTableExists(String mapType) {
		return shapefileDAO.checkTableExists(mapType);
	}
	
	@Override
	public int selectSridFromExistLayer(String mapType) {
		return shapefileDAO.selectSridFromExistLayer(mapType);
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public void processShapefileWithTransaction(File shpFile, String mapType, String layerProcess, int coord, ProgressVO progressVO) {
	    try {
	        // 1. 테이블 존재 여부 확인
	        boolean tableExists = checkTableExists(mapType);
	       
	        // 2. SRID 체크
	        if (tableExists) {
	            int existingSRID = selectSridFromExistLayer(mapType);
	            if (existingSRID != 0 && existingSRID != coord) {
	                throw new IllegalStateException(
	                    String.format("Coordinate system mismatch: Layer uses EPSG:%d but input data uses EPSG:%d", 
	                    existingSRID, coord)
	                );
	            }
	        }
	        
	        // 3. 테이블 관리 (백업 및 생성)
	        handleTableManagement(mapType, layerProcess, coord, tableExists);
	       
	        // 4. ShapeFile 처리
	        shapefileProcessService.processShapefile(shpFile, mapType, coord, progressVO);
	       
	    } catch (Exception e) {
	        if (e instanceof IllegalStateException) {
	            throw new RuntimeException(e.getMessage(), e);
	        }
	        throw new RuntimeException("Failed to process layer. Please check your data and try again", e);
	    }
	}
	
	private void handleTableManagement(String mapType, String layerProcess, int coord, boolean tableExists) {
	    String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
	    Map<String, Object> params = new HashMap<>();
	    params.put("mapType", mapType);
	    params.put("coord", coord);
	    params.put("backupTableName", mapType + "_" + timestamp);

	    if (tableExists) {
	        if ("replace".equals(layerProcess)) {
	            moveTableToBackup(params);
	        } else {
	            copyTableToBackup(params);
	        }
	    }
	    
	    if ("replace".equals(layerProcess) || !tableExists) {
	        createShapefileTable(params);
	    }
	}
}