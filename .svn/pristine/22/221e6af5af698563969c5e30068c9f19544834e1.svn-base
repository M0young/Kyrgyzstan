package egovframework.main.admin.code.mapping.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import egovframework.common.response.ApiResponse;
import egovframework.main.admin.code.mapping.dto.MappingDTO;
import egovframework.main.admin.code.mapping.service.MappingService;

@RestController
@RequestMapping("/api/admin/code/mapping")
public class MappingController {
    
    @Resource(name = "mappingService")
    private MappingService mappingService;
    
    // Classification List 조회 (페이징 적용)
    @GetMapping("/list/paged")
    public ResponseEntity<ApiResponse<Map<String, Object>>> getPagedMapping(
            @RequestParam(value = "page", defaultValue = "0") int page,
            @RequestParam(value = "size", defaultValue = "10") int size) {
        try {
            int offset = page * size;
            
            MappingDTO mappingDTO = new MappingDTO();
            mappingDTO.setOffset(offset);
            mappingDTO.setSize(size);
            
            int totalMapping = mappingService.countMapping(mappingDTO);
            List<MappingDTO> mapping = mappingService.selectClassificationList(mappingDTO);
            
            Map<String, Object> result = new HashMap<>();
            result.put("total", totalMapping);
            result.put("mapping", mapping);
            
            return ApiResponse.success(result);
        } catch (Exception e) {
            e.printStackTrace();
            return ApiResponse.error("Failed to fetch paged mapping");
        }
    }
    
    // SubClassification List 조회
    @GetMapping("/list/sub/paged")
    public ResponseEntity<ApiResponse<List<MappingDTO>>> getSubPagedMapping() {
        try {
            List<MappingDTO> subMapping = mappingService.selectSubClassificationList();
            return ApiResponse.success(subMapping);
        } catch (Exception e) {
            e.printStackTrace();
            return ApiResponse.error("Failed to fetch sub classification list");
        }
    }
    
    // 대분류 코드 변경
    @PutMapping("/update")
    public ResponseEntity<ApiResponse<String>> updateSubclassification(@RequestBody MappingDTO mapping) {
        try {
            int updatedRows = mappingService.updateSubclassification(mapping);
            if (updatedRows > 0) {
                return ApiResponse.success("Update successful");
            } else {
                return ApiResponse.error("No rows updated");
            }
        } catch (Exception e) {
            e.printStackTrace();
            return ApiResponse.error("Failed to update subclassification");
        }
    }
    
}
