package egovframework.main.admin.upload.shapefile.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import egovframework.common.response.ApiResponse;
import egovframework.main.admin.upload.progress.service.ProgressService;
import egovframework.main.admin.upload.progress.service.ProgressVO;
import egovframework.main.admin.upload.shapefile.service.ShapefileService;
import egovframework.main.admin.upload.shapefile.service.ShapefileUploadService;
import egovframework.main.admin.upload.shapefile.service.ShapefileProcessService;
import egovframework.main.admin.upload.shapefile.service.GeoServerService;

import javax.annotation.Resource;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/shapefile")
public class ShapefileController {
    private static final Logger logger = LoggerFactory.getLogger(ShapefileController.class);
    
    @Resource(name = "shapefileService")
    private ShapefileService shapefileService;
    
    @Resource(name = "progressService")
    private ProgressService progressService;
    
    @Resource(name = "shapefileUploadService")
    private ShapefileUploadService shapefileUploadService;
    
    @Resource(name = "geoServerService")
    private GeoServerService geoServerService;
    
    @Resource(name = "shapefileProcessService")
    private ShapefileProcessService shapefileProcessService;
    
    @PostMapping("/upload")   // URL 단순화
    public ResponseEntity<ApiResponse<ProgressVO>> uploadShapefile(MultipartHttpServletRequest request) {
        Map<String, File> shpFiles = new HashMap<>();
        String mapType = request.getParameter("mapType");
        int coord = Integer.parseInt(request.getParameter("coord"));
        String year = request.getParameter("year");
        String layerProcess = request.getParameter("layerProcess");
        
        try {
            validateAndProcessFiles(request, shpFiles);
            ProgressVO progressVO = progressService.initializeProgress(Integer.parseInt(request.getHeader("userNo")));
            
            CompletableFuture.runAsync(() -> 
                processShapefileAsync(shpFiles, mapType, coord, progressVO, layerProcess));
            
            return ApiResponse.success(progressVO, "File upload started successfully");
        } catch (Exception e) {
            logger.error("Error during file upload: ", e);
            return ApiResponse.error("File upload failed");
        }
    }
    
    private void validateAndProcessFiles(MultipartHttpServletRequest request, Map<String, File> shpFiles) throws Exception {
        if (!shapefileUploadService.processUploadedFiles(request, shpFiles)) {
            throw new IllegalArgumentException("Required files were not uploaded");
        }
        shapefileProcessService.validateShapefile(shpFiles.get(".shp"));
    }

    private void processShapefileAsync(Map<String, File> shpFiles, String mapType, int coord, ProgressVO progressVO, String layerProcess) {
		try {
			// 1. DB 작업 수행 (트랜잭션 처리)
			//    - replace: 기존 테이블 백업 후 새 데이터 입력
			//    - append: 기존 테이블에 데이터 추가
            shapefileService.processShapefileWithTransaction(shpFiles.get(".shp"), mapType, layerProcess, coord, progressVO);

            // 2. GeoServer 레이어 발행
            geoServerService.publishLayerToGeoServer(mapType, coord);
			
			progressService.handleProgressStatus(progressVO, "COMPLETED", null);
		} catch (Exception e) {
			progressService.handleProgressStatus(progressVO, "ERROR", e);
		} finally {
			cleanupFiles(shpFiles);
		}
	}

	@GetMapping("/progress")
	public ResponseEntity<ApiResponse<ProgressVO>> getProgress(@RequestHeader("X-Progress-ID") String progressId) {
		logger.debug("Progress ID received: " + progressId);
	    try {
	        ProgressVO progress = progressService.getProgress(progressId);
	        if (progress == null) {
	            return ApiResponse.error("Progress information not found");
	        }
	        return ApiResponse.success(progress);
	    } catch (Exception e) {
	        return ApiResponse.error("Failed to get progress");
	    }
	}
    
	@PostMapping("/analyze-prj")
	public ResponseEntity<ApiResponse<Integer>> analyzePrjFile(MultipartFile prjFile) {
	    try {
	        Integer coord = shapefileUploadService.extractCRSFromPrj(prjFile);
	        if (coord != null) {
	            return ApiResponse.success(coord, "PRJ file analyzed successfully");
	        } else {
	            return ApiResponse.error("Unable to determine coordinate system from PRJ file");
	        }
	    } catch (Exception e) {
	        return ApiResponse.error("Error analyzing PRJ file");
	    }
	}

    private void cleanupFiles(Map<String, File> shpFiles) {
        try {
        	shapefileUploadService.cleanupFiles(shpFiles);
            logger.info("임시 파일 정리 완료");
        } catch (Exception e) {
            logger.error("임시 파일 정리 중 오류", e);
        }
    }
}