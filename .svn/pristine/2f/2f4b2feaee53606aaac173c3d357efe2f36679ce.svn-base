package egovframework.main.admin.role.web;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import egovframework.common.response.ApiResponse;
import egovframework.main.admin.role.service.RoleService;
import egovframework.main.admin.role.service.RoleVO;

@RestController
@RequestMapping("/role")
public class RoleController {
    private static final Logger logger = LoggerFactory.getLogger(RoleController.class);
    
    @Resource(name = "roleService")
    private RoleService roleService;
    
    @PostMapping("/list")
    public ResponseEntity<ApiResponse<List<RoleVO>>> selectGroupAuthryList(
        @RequestParam(value = "page", defaultValue = "1") int page,
        @RequestParam(value = "size", defaultValue = "10") int size
    ) {
        try {
            // 페이지네이션 적용된 역할 목록 조회
            List<RoleVO> authryList = roleService.selectGroupAuthryList(page, size);
            
            return ApiResponse.success(authryList);
        } catch (Exception e) {
            logger.error("❌ 역할 목록 조회 중 오류 발생", e);
            return ApiResponse.error("권한 목록 조회 실패");
        }
    }
    
    @PostMapping("/insert")
    public ResponseEntity<ApiResponse<Void>> insertGroupAuthry(@RequestBody RoleVO groupAuthry) {
        try {
            if (groupAuthry == null) {
                return ApiResponse.error("요청 데이터가 존재하지 않습니다.");
            }

            if (groupAuthry.getGroup_nm() == null || groupAuthry.getGroup_nm().trim().isEmpty()) {
                return ApiResponse.error("역할 이름(group_nm)은 필수입니다.");
            }
            if (groupAuthry.getRgtr() == null || groupAuthry.getRgtr().trim().isEmpty()) {
                return ApiResponse.error("등록자(rgtr)는 필수입니다.");
            }

            roleService.insertGroupAuthry(groupAuthry);
            return ApiResponse.success(null, "권한이 추가되었습니다.");
        } catch (Exception e) {
            return ApiResponse.error("권한 추가 실패: " + e.getMessage());
        }
    }



    
    @PostMapping("/update")
    public ResponseEntity<ApiResponse<Void>> updateGroupAuthry(RoleVO groupAuthry) {
        try {
        	roleService.updateGroupAuthry(groupAuthry);
            return ApiResponse.success(null, "권한이 수정되었습니다.");
        } catch (Exception e) {
            logger.error("그룹 권한 수정 중 오류 발생", e);
            return ApiResponse.error("권한 수정 실패");
        }
    }
    
    @PostMapping("/delete")
    public ResponseEntity<ApiResponse<Void>> deleteGroupAuthry(RoleVO groupAuthry) {
        try {
            roleService.deleteGroupAuthry(groupAuthry);
            return ApiResponse.success(null, "권한이 삭제되었습니다.");
        } catch (Exception e) {
            logger.error("그룹 권한 삭제 중 오류 발생", e);
            return ApiResponse.error("권한 삭제 실패");
        }
    }
    
    @PostMapping("/delete-all")
    public ResponseEntity<ApiResponse<Void>> deleteAllGroupAuthry(@RequestParam String groupId) {
        try {
            roleService.deleteAllGroupAuthry(groupId);
            return ApiResponse.success(null, "모든 권한이 삭제되었습니다.");
        } catch (Exception e) {
            logger.error("그룹의 모든 권한 삭제 중 오류 발생", e);
            return ApiResponse.error("모든 권한 삭제 실패");
        }
    }
    
    // 선택된 그룹의 권한 정보를 조회 (group_autry 테이블에서 authry_no 목록 반환)
    @PostMapping("/getInfo")
    public ResponseEntity<ApiResponse<List<Integer>>> selectAuthryInfo(@RequestBody Map<String, Object> params) {
        try {
            // JSON의 키는 문자열로 전달됨. 값을 문자열로 변환 후 정수로 파싱
            String groupNoStr = params.get("group_no").toString();
            Integer groupNo = Integer.valueOf(groupNoStr);
            List<Integer> authryList = roleService.selectAuthryInfo(groupNo);
            return ApiResponse.success(authryList);
        } catch (Exception e) {
            logger.error("Error fetching authority info", e);
            return ApiResponse.error("Failed to fetch authority info");
        }
    }

    
}