<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
<c:set var="pageFolder" value="admin" />
<c:set var="pageCss" value="roleManager" />
<aside class="navbar navbar-vertical navbar-expand-lg" id="sidebar">
  <div class="container-fluid">
    <!-- Main Navigation -->
    <div class="navbar-collapse collapse show">
      <ul class="navbar-nav pt-lg-3">
        <!-- User Management Section -->
        <li class="nav-item">
          <a class="nav-link ${fn:contains(pageContext.request.requestURI, '/user/list') ? 'active' : ''}" href="../user/list">
            <span class="nav-link-icon">
              <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-users"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 7m-4 0a4 4 0 1 0 8 0a4 4 0 1 0 -8 0" /><path d="M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2" /><path d="M16 3.13a4 4 0 0 1 0 7.75" /><path d="M21 21v-2a4 4 0 0 0 -3 -3.85" /></svg>
            </span>
            <span class="nav-link-title">User Management</span>
          </a>
        </li>
        <!-- Role Management Section -->
        <li class="nav-item">
          <a class="nav-link ${fn:contains(pageContext.request.requestURI, '/admin/role/list') ? 'active' : ''}" href="../role/list">
            <span class="nav-link-icon">
              <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-shield-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M11.46 20.846a12 12 0 0 1 -7.96 -14.846a12 12 0 0 0 8.5 -3a12 12 0 0 0 8.5 3a12 12 0 0 1 -.09 7.06" /><path d="M15 19l2 2l4 -4" /></svg>
            </span>
            <span class="nav-link-title">Role Management</span>
          </a>
        </li>
        <!-- Code Management Section -->
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#navbar-dashboard" data-bs-toggle="dropdown" data-bs-auto-close="false" role="button" aria-expanded="true">
            <span class="nav-link-icon">
              <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-device-desktop-search"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M11.5 16h-7.5a1 1 0 0 1 -1 -1v-10a1 1 0 0 1 1 -1h16a1 1 0 0 1 1 1v6.5" /><path d="M7 20h4" /><path d="M9 16v4" /><path d="M18 18m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0" /><path d="M20.2 20.2l1.8 1.8" /></svg>
            </span>
            <span class="nav-link-title">Code Management</span>
          </a>
          <div class="dropdown-menu show">
            <a class="dropdown-item" href="../code/type">Land Type</a>
            <a class="dropdown-item" href="../code/class">Land Use Classification</a>
            <a class="dropdown-item" href="../code/subclass">Land Use Subclassification</a>
            <a class="dropdown-item" href="../code/mapping">Land Use Mapping</a>
            <a class="dropdown-item" href="../code/symbol">Symbol Codes</a>
          </div>
        </li>
        <!-- History Section -->
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#navbar-dashboard" data-bs-toggle="dropdown" data-bs-auto-close="false" role="button" aria-expanded="true">
            <span class="nav-link-icon">
              <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-brand-days-counter"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M20.779 10.007a9 9 0 1 0 -10.77 10.772" /><path d="M13 21h8v-7" /><path d="M12 8v4l3 3" /></svg>
            </span>
            <span class="nav-link-title">History</span>
          </a>
          <div class="dropdown-menu show">
            <a class="dropdown-item" href="../history/visit" role="button" aria-expanded="true">Visit</a>
            <a class="dropdown-item" href="../history/log">User Log</a>
            <a class="dropdown-item" href="../history/upload">Data Upload</a>
          </div>
        </li>
      </ul>
      
    </div>
  </div>
</aside>


<script>
	document.addEventListener('DOMContentLoaded', function() {
		  const sidebar = document.getElementById('sidebar');
		  const toggleBtn = document.getElementById('sidebar-toggle');
		  
		  
		  toggleBtn.addEventListener('click', function() {
		    sidebar.classList.toggle('collapsed');
		  });
	
		  // Dropdown functionality
		  const dropdowns = document.querySelectorAll('.dropdown-toggle');
		  dropdowns.forEach(dropdown => {
		    dropdown.addEventListener('click', function(e) {
		      e.preventDefault();
		      const menu = this.nextElementSibling;
		      this.setAttribute('aria-expanded', 
		        this.getAttribute('aria-expanded') === 'true' ? 'false' : 'true'
		      );
		      menu.classList.toggle('show');
		    });
		  });
		});

		function toggleDropdown(button, menuId) {
			  const dropdownMenu = document.getElementById(menuId);
			  dropdownMenu.classList.toggle('show');
		
			  document.addEventListener('click', function closeDropdown(e) {
			    if (!dropdownMenu.contains(e.target) && !button.contains(e.target)) {
			      dropdownMenu.classList.remove('show');
			      document.removeEventListener('click', closeDropdown);
			    }
			  });
			}
			
		function toggleDropdown(button, menuId) {
			  const dropdownMenu = document.getElementById(menuId);
			  dropdownMenu.classList.toggle('show');
			  
			  // í´ë¦­ ì´ë²¤í¸
			  document.addEventListener('click', function closeDropdown(e) {
			    if (!dropdownMenu.contains(e.target) && !button.contains(e.target)) {
			      dropdownMenu.classList.remove('show');
			      document.removeEventListener('click', closeDropdown);
			    }
			  });
			}
		
		document.addEventListener('DOMContentLoaded', function() {
		    // 모든 드롭다운 아이템 가져오기
		    const dropdownItems = document.querySelectorAll('.dropdown-item');
		    const dropdownMenus = document.querySelectorAll('.dropdown-menu');
		    const dropdownToggles = document.querySelectorAll('.dropdown-toggle');

		    // 현재 URL을 기준으로 활성화된 메뉴 찾기
		    const currentURL = window.location.pathname;

		    dropdownItems.forEach(item => {
		        // 현재 URL과 href가 일치하면 active 클래스 추가
		        if (item.href.includes(currentURL)) {
		            item.classList.add('active');

		            // 부모 .dropdown-menu의 상위 .dropdown-toggle도 active 추가
		            let parentMenu = item.closest('.dropdown-menu');
		            if (parentMenu) {
		                let parentToggle = parentMenu.previousElementSibling;
		                if (parentToggle && parentToggle.classList.contains('dropdown-toggle')) {
		                    parentToggle.classList.add('active');
		                }
		            }
		        }

		        // 클릭 시 다른 모든 dropdown-item에서 active 제거 후 현재 클릭된 항목에 active 추가
		        item.addEventListener('click', function() {
		            // 같은 .dropdown-menu 내에서 기존 active 제거
		            let parentMenu = this.closest('.dropdown-menu');
		            if (parentMenu) {
		                parentMenu.querySelectorAll('.dropdown-item').forEach(el => el.classList.remove('active'));
		            }

		            // 현재 클릭된 요소에 active 추가
		            this.classList.add('active');

		            // 상위 dropdown-toggle에도 active 추가
		            let parentToggle = parentMenu ? parentMenu.previousElementSibling : null;
		            if (parentToggle && parentToggle.classList.contains('dropdown-toggle')) {
		                parentToggle.classList.add('active');
		            }

		            // 다른 dropdown-toggle의 active 제거 (다른 그룹에는 적용되지 않도록)
		            dropdownToggles.forEach(toggle => {
		                if (toggle !== parentToggle) {
		                    toggle.classList.remove('active');
		                }
		            });
		        });
		    });
		});

		
		
	</script>
	<script>
	      document.addEventListener("DOMContentLoaded", function() {
	      const list = new List('table-default', {
	      	sortClass: 'table-sort',
	      	listClass: 'table-tbody',
	      	valueNames: [ 'sort-name', 'sort-type', 'sort-city', 'sort-score',
	      		{ attr: 'data-date', name: 'sort-date' },
	      		{ attr: 'data-progress', name: 'sort-progress' },
	      		'sort-quantity'
	      	]
	      });
	      })
    </script>
    
    
 


