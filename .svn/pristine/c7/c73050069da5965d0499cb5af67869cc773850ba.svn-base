_GL.TYPE = (function () {
  'use strict';

  let currentPage = 0;
  let editModalInstance = null;
  const pageSize = 9; // 기본 페이지 크기

  function getElements() {
    return {
      typeTableBody: document.getElementById('type-table-body'),
      createModal: document.getElementById('create-modal-code'),
      createButton: document.querySelector('.create-btn'),
      cancelButton: document.getElementById('cancelCreateCode'),
      saveButton: document.getElementById('saveCreateRole'),
      // 모달 내의 input 요소 선택 (placeholder로 선택)
      inputLandCode: document.querySelector('#create-modal-code input[placeholder="Code"]'),
      inputLandTypeEn: document.querySelector('#create-modal-code input[placeholder="English"]'),
      inputLandTypeKy: document.querySelector('#create-modal-code input[placeholder="Kirghiz"]'),
      inputLandTypeRu: document.querySelector('#create-modal-code input[placeholder="Russian"]'),
      inputRemark: document.querySelector('#create-modal-code textarea[placeholder="Remark"]'),
      editModal: document.getElementById('edit-modal-code'),
      editLandCode: document.querySelector('#edit-modal-code input[placeholder="Land Code"]'),
      editTypeEn: document.querySelector('#edit-modal-code input[placeholder="Land Type in English"]'),
      editTypeKy: document.querySelector('#edit-modal-code input[placeholder="Land Type in Kirghiz"]'),
      editTypeRu: document.querySelector('#edit-modal-code input[placeholder="Land Type in Russian"]'),
      editTypeRmrk: document.querySelector('#edit-modal-code textarea[placeholder="Remark"]'),
      editsaveButton: document.getElementById('saveEditCode'),
      editdeleteButton: document.getElementById('deleteEditCode'),
      editcancelButton: document.getElementById('cancelEditCode'),
      searchInput: document.getElementById('search-input'),
      searchButton: document.getElementById('search-btn'),
      typeCount: document.getElementById('type-count'),
      prevPage: document.getElementById('prev-page'),
      nextPage: document.getElementById('next-page'),
      paginationNumbers: document.getElementById('pagination-numbers')
    };
  }

  function fetchTypeData(query = '', page = 0) {
    const elements = getElements();
    currentPage = page;
    elements.typeTableBody.innerHTML = `<tr><td colspan="7" class="text-center">Loading...</td></tr>`;
    const trimmedQuery = query.trim();
    let url = `/klums/api/admin/code/type/list/paged?page=${page}&size=${pageSize}`;
    if (trimmedQuery) {
      url += `&query=${encodeURIComponent(trimmedQuery)}`;
    }
    fetch(url)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        const result = data.data || {};
        const totalTypes = result.total || 0;
        const types = result.type || [];
        elements.typeCount.textContent = totalTypes;
        elements.typeTableBody.innerHTML = '';

        if (types.length === 0) {
          elements.typeTableBody.innerHTML = `<tr><td colspan="7" class="text-center">No results found.</td></tr>`;
          return;
        }

        types.forEach((type, index) => {
          const row = `
            <tr>
              <td>${(page * pageSize) + index + 1}</td>
              <td>${type.type_cd}</td>
              <td>${type.type_nm_en}</td>
              <td>${type.type_nm_ky}</td>
              <td>${type.type_nm_ru}</td>
              <td style="width: 350px">
                <div class="remark-container">
                  <div class="remark-text">${type.rmrk}</div>
                  <span class="read-more">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" 
                      viewBox="0 0 24 24" fill="currentColor"  
                      class="icon icon-tabler icons-tabler-filled icon-tabler-caret-down">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                      <path d="M18 9c.852 0 1.297 .986 .783 1.623l-.076 .084l-6 6a1 1 0 0 1 -1.32 .083l-.094 -.083l-6 -6l-.083 -.094l-.054 -.077l-.054 -.096l-.017 -.036l-.027 -.067l-.032 -.108l-.01 -.053l-.01 -.06l-.004 -.057v-.118l.005 -.058l.009 -.06l.01 -.052l.032 -.108l.027 -.067l.07 -.132l.065 -.09l-.073 -.081l-.094 -.083l-.077 -.054l-.096 -.054l-.036 -.017l-.067 -.027l-.108 -.032l-.053 -.01l-.06 -.01l-.057 -.004l12.059 -.002z" />
                    </svg>
                  </span>
                </div>
              </td>
              <td>
                <button class="btn btn-sm btn-ghost-primary edit-button" data-id="${type.type_cd}">
                  EDIT
                </button>
              </td>
            </tr>`;
          elements.typeTableBody.insertAdjacentHTML('beforeend', row);
        });

        // 각 행의 remark 텍스트가 넘치는지 확인 후 read-more 토글 처리
        checkRemarkOverflow();

        setupPagination(totalTypes, page);
      })
      .catch(error => {
        console.error('Error fetching type data:', error);
        elements.typeTableBody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Failed to load types</td></tr>`;
      });
  }

  // remark 텍스트 overflow 체크 함수
  function checkRemarkOverflow() {
    const containers = document.querySelectorAll('#type-table-body .remark-container');
    containers.forEach(container => {
      const remarkText = container.querySelector('.remark-text');
      const readMoreButton = container.querySelector('.read-more');
      if (remarkText && readMoreButton) {
        if (remarkText.scrollHeight <= remarkText.clientHeight) {
          readMoreButton.remove();
        }
      }
    });
  }

  function setupPagination(totalTypes, currentPage) {
    const elements = getElements();
    const totalPages = Math.ceil(totalTypes / pageSize);
    if (currentPage <= 0) {
      elements.prevPage.parentElement.classList.add('disabled');
    } else {
      elements.prevPage.parentElement.classList.remove('disabled');
    }
    if (currentPage >= totalPages - 1) {
      elements.nextPage.parentElement.classList.add('disabled');
    } else {
      elements.nextPage.parentElement.classList.remove('disabled');
    }

    const blockSize = 5;
    const block = Math.floor(currentPage / blockSize);
    const startPage = block * blockSize;
    const endPage = Math.min(totalPages, startPage + blockSize);

    elements.paginationNumbers.innerHTML = '';
    for (let i = startPage; i < endPage; i++) {
      let li = document.createElement('li');
      li.className = 'page-item' + (i === currentPage ? ' active' : '');
      li.style.display = 'inline-block';
      li.innerHTML = `<a class="page-link" href="#">${i + 1}</a>`;
      li.addEventListener('click', (e) => {
        e.preventDefault();
        fetchTypeData(elements.searchInput.value, i);
      });
      elements.paginationNumbers.appendChild(li);
    }
  }

  function setupPaginationEvents() {
    const elements = getElements();
    if (elements.prevPage) {
      elements.prevPage.addEventListener('click', (e) => {
        e.preventDefault();
        if (currentPage > 0) {
          fetchTypeData(elements.searchInput.value, currentPage - 1);
        }
      });
    }
    if (elements.nextPage) {
      elements.nextPage.addEventListener('click', (e) => {
        e.preventDefault();
        fetchTypeData(elements.searchInput.value, currentPage + 1);
      });
    }
  }

  function setupSearchEvent() {
    const elements = getElements();
    if (elements.searchButton) {
      elements.searchButton.addEventListener('click', () => {
        fetchTypeData(elements.searchInput.value, 0);
      });
    }
    if (elements.searchInput) {
      elements.searchInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          fetchTypeData(elements.searchInput.value, 0);
        }
      });
    }
  }
  
  // 테이블 본문에 read-more 토글 이벤트 위임 적용
  function toggleRemark() {
    const tableBody = document.getElementById('type-table-body');
    tableBody.addEventListener('click', function(e) {
      const readMoreElement = e.target.closest('.read-more');
      if (readMoreElement) {
        const remarkText = readMoreElement.parentElement.querySelector('.remark-text');
        remarkText.classList.toggle('expanded');
        if (remarkText.classList.contains('expanded')) {
          readMoreElement.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" 
              viewBox="0 0 24 24" fill="currentColor"  
              class="icon icon-tabler icons-tabler-filled icon-tabler-caret-up">
              <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
              <path d="M11.293 7.293a1 1 0 0 1 1.32 -.083l.094 .083l6 6l.083 .094l.054 .077l.054 .096l.017 .036l.027 .067l.032 .108l.01 .053l.01 .06l.004 .057l.002 .059l-.002 .059l-.005 .058l-.009 .06l-.01 .052l-.032 .108l-.027 .067l-.07 .132l-.065 .09l-.073 .081l-.094 .083l-.077 .054l-.096 .054l-.036 .017l-.067 .027l-.108 .032l-.053 .01l-.06 .01l-.057 .004l-.059 .002h-12c-.852 0 -1.297 -.986 -.783 -1.623l.076 -.084l6 -6z" />
            </svg>`;
        } else {
          readMoreElement.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" 
              viewBox="0 0 24 24" fill="currentColor"  
              class="icon icon-tabler icons-tabler-filled icon-tabler-caret-down">
              <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
              <path d="M18 9c.852 0 1.297 .986 .783 1.623l-.076 .084l-6 6a1 1 0 0 1 -1.32 .083l-.094 -.083l-6 -6l-.083 -.094l-.054 -.077l-.054 -.096l-.017 -.036l-.027 -.067l-.032 -.108l-.01 -.053l-.01 -.06l-.004 -.057v-.118l.005 -.058l.009 -.06l.01 -.052l.032 -.108l.027 -.067l.07 -.132l.065 -.09l.073 -.081l.094 -.083l.077 -.054l.096 -.054l.036 -.017l-.067 -.027l-.108 -.032l-.053 -.01l-.06 -.01l-.057 -.004l12.059 -.002z" />
            </svg>`;
        }
      }
    });
  }
  
  /**
   * create modal 이벤트 설정
   */
  function setupCreateModalEvent() {
    const elements = getElements();
    if (!elements.createButton || !elements.createModal) return;

    elements.createButton.addEventListener('click', function () {
      const modalInstance = new bootstrap.Modal(elements.createModal);
      modalInstance.show();
    });

    if (elements.cancelButton) {
      elements.cancelButton.addEventListener('click', function () {
        const modalInstance = bootstrap.Modal.getInstance(elements.createModal);
        if (modalInstance) modalInstance.hide();
      });
    }
  }
  
  /**
   * 역할 생성 SAVE 버튼 이벤트 설정 (create 기능 구현)
   */
  function setupCreateTypeSaveEvent() {
    const elements = getElements();
    if (!elements.saveButton) return;

    elements.saveButton.removeEventListener('click', handleCreateTypeSave);
    elements.saveButton.addEventListener('click', handleCreateTypeSave);
  }
  
  /**
   * SAVE 버튼 클릭 시 호출되는 함수
   * - 모달의 입력값을 수집 후, 검증 및 POST 전송
   * - 성공 시 모달을 닫고 목록을 갱신
   */
  function handleCreateTypeSave() {
    const elements = getElements();
    const landCode = elements.inputLandCode.value.trim();
    const landTypeEn = elements.inputLandTypeEn.value.trim();
    const landTypeKy = elements.inputLandTypeKy.value.trim();
    const landTypeRu = elements.inputLandTypeRu.value.trim();
    const remark = elements.inputRemark.value.trim();

    // 필수값 검증 (필요 시 추가 검증 가능)
    if (!landCode || !landTypeEn || !landTypeKy || !landTypeRu) {
      alert('모든 필드를 입력해 주세요.');
      return;
    }

    // 전송할 데이터 객체 생성
    const payload = {
      type_cd: landCode,
      type_nm_en: landTypeEn,
      type_nm_ky: landTypeKy,
      type_nm_ru: landTypeRu,
      rmrk: remark
    };

    fetch('/klums/api/admin/code/type/insert', {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': _GL.csrf.token
      },
      body: JSON.stringify(payload)
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('타입 생성에 실패하였습니다.');
        }
        return response.json();
      })
      .then(data => {
        // 모달 닫기
        const modalInstance = bootstrap.Modal.getInstance(elements.createModal);
        if (modalInstance) modalInstance.hide();
        // 입력값 초기화
        elements.inputLandCode.value = '';
        elements.inputLandTypeEn.value = '';
        elements.inputLandTypeKy.value = '';
        elements.inputLandTypeRu.value = '';
        elements.inputRemark.value = '';
        // 목록 갱신 (현재 페이지 유지)
        fetchTypeData(elements.searchInput.value, currentPage);
      })
      .catch(error => {
        console.error('Error creating type:', error);
        alert('타입 생성 중 오류가 발생했습니다: ' + error.message);
      });
  }
  
  /**
   * Edit 버튼 클릭 이벤트 및 Save/DELETE 기능 추가  
   * Bootstrap Modal API를 사용하여 모달을 제어
   */
  function setupEditEvent() {
    const elements = getElements();

    // EDIT 버튼 클릭 시, 해당 row의 데이터를 편집 모달에 채워넣고 모달을 표시
    elements.typeTableBody.addEventListener('click', function (e) {
      if (e.target.classList.contains('edit-button')) {
        const row = e.target.closest('tr');
        const typeData = {
          type_cd: row.cells[1].textContent.replace(/^code/, '').trim(),
          type_nm_en: row.cells[2].textContent,
          type_nm_ky: row.cells[3].textContent,
          type_nm_ru: row.cells[4].textContent,
          rmrk: row.cells[5].textContent,
        };
        
        elements.editLandCode.value = typeData.type_cd;
        elements.editTypeEn.value = typeData.type_nm_en;
        elements.editTypeKy.value = typeData.type_nm_ky;
        elements.editTypeRu.value = typeData.type_nm_ru;
        elements.editTypeRmrk.value = typeData.rmrk.trim(); // (수정사항 2 적용)
        
     // 업데이트 시 기준이 될 type_cd를 모달의 data-code 속성에 저장
        elements.editModal.setAttribute('data-code', typeData.type_cd);
        
        editModalInstance = new bootstrap.Modal(elements.editModal);
        editModalInstance.show();
      }
    });

    // SAVE 버튼 클릭 시, 수정된 데이터를 서버에 전송
    elements.editsaveButton.addEventListener('click', function () {
      const code = elements.editModal.getAttribute('data-code');
      const updatedData = {
    		  type_nm_en: elements.editTypeEn.value,
    		  type_nm_ky: elements.editTypeKy.value,
    		  type_nm_ru: elements.editTypeRu.value,
    		  rmrk: elements.editTypeRmrk.value,
    		  type_cd: code
      };

      fetch('/klums/api/admin/code/type/update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-TOKEN': _GL.csrf.token
        },
        body: JSON.stringify(updatedData)
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then((result) => {
          if (result.success) {
            if (editModalInstance) editModalInstance.hide();
            fetchTypeData(); 
          } else {
            alert('Failed to update user.');
          }
        })
        .catch((error) => {
          alert('An error occurred while updating the user.');
        });
    });

    // DELETE 버튼 클릭 이벤트 (setupEditEvent 내부)
    elements.editdeleteButton.addEventListener('click', function () {
      if (editModalInstance) {
        editModalInstance.hide();
      }
      _GL.COMMON.showAlertModal({
        type: 'error',
        title: 'Are you sure?',
        message: '항목을 삭제하시겠습니까?',
        btn1: {
          text: 'Delete',
          callback: function () {
            deleteItems();
          }
        },
        btn2: {
          text: 'Cancel',
          callback: function () {
            if (editModalInstance) {
              editModalInstance.show();
            }
          }
        }
      });
    });

    // CANCEL 버튼 클릭 시 모달 닫기
    elements.editcancelButton.addEventListener('click', function () {
      if (editModalInstance) {
        editModalInstance.hide();
      }
    });
  }
  
  // DELETE 버튼 클릭 시 삭제
  function deleteItems() {
    const codeElem = document.getElementById('edit-modal-code');
    const code = codeElem.getAttribute('data-code');
    fetch('/klums/api/admin/code/type/delete', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-TOKEN': _GL.csrf.token
      },
      body: JSON.stringify({ type_cd : code })
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then((result) => {
        if (result.success) {
        	fetchTypeData();
        } else {
          alert('Failed to delete user.');
        }
      })
      .catch((error) => {
        alert('An error occurred while deleting the user.');
      });
  }
  

  function init() {
    fetchTypeData('', 0);
    setupPaginationEvents();
    setupCreateModalEvent();
    setupEditEvent()
    setupCreateTypeSaveEvent(); // create SAVE 이벤트 등록
    toggleRemark();
    setupSearchEvent();
  }

  return {
    init: init
  };
})();

document.addEventListener('DOMContentLoaded', function () {
  _GL.TYPE.init();
});
