/*========================================================
    DATE: 2025. 01
    AUTHOR: JEON
    DESC: User Access (ApexCharts version)
========================================================*/
_GL.ACCESS = (function () {
    'use strict';
    
    let currentPage = 0;
    const pageSize = 10;
    let chart; // ApexCharts 인스턴스
    
    // 공통 DOM 요소 취득 (테이블 + 차트 관련)
    function getElements() {
        return {
            // 테이블 관련
            accessTableBody: document.getElementById('access-table-body'),
            searchInput: document.getElementById('search-input'),
            searchButton: document.getElementById('search-btn'),
            accessCount: document.getElementById('access-count'),
            prevPage: document.getElementById('prev-page'),
            nextPage: document.getElementById('next-page'),
            paginationNumbers: document.getElementById('pagination-numbers'),
            // 차트 관련
            // 수정: HTML에 존재하는 실제 차트 컨테이너 id "apexcharts5eff3xfu" 사용
            chartEl: document.getElementById('apexcharts5eff3xfu'),
            granularitySelect: document.getElementById('granularitySelect'),
            yearSelect: document.getElementById('yearSelect'),
            monthSelect: document.getElementById('monthSelect'),
            dateRange: document.getElementById('dateRange')
        };
    }
    
    // 테이블 조회 (검색 + 페이지네이션)
    function fetchAccessData(query = '', page = 0) {
        const elements = getElements();
        currentPage = page;
        elements.accessTableBody.innerHTML = `<tr><td colspan="5" class="text-center">Loading...</td></tr>`;
        
        const trimmedQuery = query.trim();
        let url = `/klums/api/admin/history/access/list/paged?page=${page}&size=${pageSize}`;
        if (trimmedQuery) {
            url += `&query=${encodeURIComponent(trimmedQuery)}`;
        }
        
        fetch(url)
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                return response.json();
            })
            .then(data => {
                const result = data.data || {};
                const totalAccess = result.total || 0;
                const accessList = result.access || [];
                
                elements.accessCount.textContent = totalAccess;
                elements.accessTableBody.innerHTML = '';
                
                if (accessList.length === 0) {
                    elements.accessTableBody.innerHTML = `<tr><td colspan="5" class="text-center">No results found.</td></tr>`;
                } else {
                    accessList.forEach((item, index) => {
                        const row = `<tr>
                            <td>${(page * pageSize) + index + 1}</td>
                            <td>${item.user_nm}</td>
                            <td>${item.msg}</td>
                            <td>${item.ip}</td>
                            <td>${item.reg_dt}</td>
                        </tr>`;
                        elements.accessTableBody.insertAdjacentHTML('beforeend', row);
                    });
                }
                setupPagination(totalAccess, page);
            })
            .catch(error => {
                console.error('Error fetching log data:', error);
                elements.accessTableBody.innerHTML = `<tr><td colspan="5" class="text-center text-danger">Failed to load logs</td></tr>`;
            });
    }
    
    // 페이지네이션 생성
    function setupPagination(totalAccess, currentPage) {
        const elements = getElements();
        const totalPages = Math.ceil(totalAccess / pageSize);
        
        if (currentPage <= 0) {
            elements.prevPage.parentElement.classList.add('disabled');
        } else {
            elements.prevPage.parentElement.classList.remove('disabled');
        }
        if (currentPage >= totalPages - 1) {
            elements.nextPage.parentElement.classList.add('disabled');
        } else {
            elements.nextPage.parentElement.classList.remove('disabled');
        }
        
        const blockSize = 5;
        const block = Math.floor(currentPage / blockSize);
        const startPage = block * blockSize;
        const endPage = Math.min(totalPages, startPage + blockSize);
        
        elements.paginationNumbers.innerHTML = '';
        for (let i = startPage; i < endPage; i++) {
            const li = document.createElement('li');
            li.className = 'page-item' + (i === currentPage ? ' active' : '');
            li.style.display = 'inline-block';
            li.innerHTML = `<a class="page-link" href="#">${i + 1}</a>`;
            li.addEventListener('click', (e) => {
                e.preventDefault();
                fetchAccessData(elements.searchInput.value, i);
            });
            elements.paginationNumbers.appendChild(li);
        }
    }
    
    function setupPaginationEvents() {
        const elements = getElements();
        if (elements.prevPage) {
            elements.prevPage.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage > 0) {
                    fetchAccessData(elements.searchInput.value, currentPage - 1);
                }
            });
        }
        if (elements.nextPage) {
            elements.nextPage.addEventListener('click', (e) => {
                e.preventDefault();
                fetchAccessData(elements.searchInput.value, currentPage + 1);
            });
        }
    }
    
    // 검색 이벤트 등록
    function setupSearchEvent() {
        const elements = getElements();
        if (elements.searchButton) {
            elements.searchButton.addEventListener('click', () => {
                fetchAccessData(elements.searchInput.value, 0);
            });
        }
        if (elements.searchInput) {
            elements.searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    fetchAccessData(elements.searchInput.value, 0);
                }
            });
        }
    }
    
    // ApexCharts 라인 차트 초기화 (마커 표시, 선 표시, 채우기 없음)
    function initChart() {
        const elements = getElements();
        if (!elements.chartEl) return;
        
        const options = {
            chart: {
                type: "line",
                fontFamily: "inherit",
                parentHeightOffset: 0,
                height: 320,
                zoom: {
                    enabled: false
                },
                toolbar: {
                    show: true,
                    tools: {
                        download: true, 
                    }
                },
                dropShadow: {
                    enabled: true,
                    top: 5,
                    left: 0,
                    blur: 5,
                    opacity: 0.2
                },
                animations: {
                    enabled: true,
                    easing: 'easeinout',
                    speed: 800,
                    animateGradually: {
                        enabled: true,
                        delay: 150
                    },
                    dynamicAnimation: {
                        enabled: true,
                        speed: 350
                    }
                }
            },
            stroke: { 
                curve: 'straight',
                width: 3,
                colors: ['#0d6efd']
            },
            markers: {
                size: 5,
                strokeWidth: 2,
                hover: { size: 7 },
                colors: ['#0d6efd'],
                strokeColors: '#fff'
            },
            fill: {
                type: 'solid',
                opacity: 1  // 채우기 없음
            },
            dataLabels: { enabled: false },
            series: [{
                name: 'Login Success',
                data: []  // 초기 데이터 빈 배열
            }],
            xaxis: {
                categories: [],  // 이후 updateChartData()에서 설정
                labels: { style: { fontSize: '12px' } }
            },
            yaxis: {
                labels: { style: { fontSize: '12px' } },
                min: 0
            },
            tooltip: { enabled: true },
            colors: ['#0d6efd']
        };
        
        chart = new ApexCharts(elements.chartEl, options);
        chart.render().then(() => {
            updateChartData();
        });
    }
    
    // 차트 데이터 갱신
 // 차트 데이터 갱신
    function updateChartData() {
        const elements = getElements();
        let params = { granularity: elements.granularitySelect.value };

        if (params.granularity === 'monthly') {
            params.year = elements.yearSelect.value;
        } else if (params.granularity === 'weekly') {
            params.year = elements.yearSelect.value;
            params.month = elements.monthSelect.value;
        } else {
            params.dateRange = elements.dateRange.value;
        }

        const queryString = Object.keys(params)
            .map(key => key + '=' + encodeURIComponent(params[key]))
            .join('&');

        fetch(`/klums/api/admin/history/access/chart?${queryString}`)
            .then(response => {
                if (!response.ok) throw new Error('HTTP error ' + response.status);
                return response.json();
            })
            .then(data => {
                const chartData = data.data.chartData || [];
                if (chartData.length === 0) {
                    console.warn('차트 데이터가 비어있습니다.');
                }

                // 함수: 시리즈 데이터로부터 동적 y축 범위 계산
                function computeYAxisRange(seriesData) {
                    const seriesMin = Math.min(...seriesData);
                    const seriesMax = Math.max(...seriesData);
                    const range = seriesMax - seriesMin;
                    let newYMin, newYMax;
                    // 만약 데이터 범위가 아주 작으면 평균을 기준으로 ±10 정도 여유 부여
                    if (range < 10) {
                        const avg = seriesData.reduce((sum, val) => sum + val, 0) / seriesData.length;
                        newYMin = avg - 10;
                        newYMax = avg + 10;
                    } else {
                        newYMin = seriesMin - range * 0.1;
                        newYMax = seriesMax + range * 0.1;
                    }
                    return { min: newYMin, max: newYMax };
                }

                // (1) monthly 모드: "Jan"~"Dec" 고정 라벨 사용
                if (params.granularity === 'monthly') {
                    const fullMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
                    const dataMap = {};
                    chartData.forEach(item => {
                        dataMap[item.label] = item.successCount;
                    });
                    const seriesData = fullMonths.map(m => dataMap[m] || 0);
                    const yAxisRange = computeYAxisRange(seriesData);

                    chart.updateOptions({
                        xaxis: { categories: fullMonths },
                        yaxis: { min: yAxisRange.min, max: yAxisRange.max },
                        stroke: { curve: 'straight', width: 3, colors: ['#0d6efd'] }
                    });
                    chart.updateSeries([{
                        name: 'Login Success',
                        data: seriesData
                    }]);
                
                // (2) weekly/daily 모드: 기존 로직
                } else {
                    const categories = chartData.map(item => item.label);
                    const seriesData = chartData.map(item => item.successCount);
                    const yAxisRange = computeYAxisRange(seriesData);

                    chart.updateOptions({
                        xaxis: { categories: categories },
                        yaxis: { min: yAxisRange.min, max: yAxisRange.max }
                    });
                    chart.updateSeries([{
                        name: 'Login Success',
                        data: seriesData
                    }]);
                }
            })
            .catch(error => {
                console.error('Error fetching chart data:', error);
            });
    }

    
    // Granularity에 따른 UI 토글 (월별, 주별, 일별)
    function updateChartGranularityUI() {
        const elements = getElements();
        const val = elements.granularitySelect.value;
        
        if (val === 'monthly') {
            elements.yearSelect.style.display = 'inline-block';
            elements.monthSelect.style.display = 'none';
            elements.dateRange.style.display = 'none';
        } else if (val === 'weekly') {
            elements.yearSelect.style.display = 'inline-block';
            elements.monthSelect.style.display = 'inline-block';
            elements.dateRange.style.display = 'none';
        } else {
            elements.yearSelect.style.display = 'none';
            elements.monthSelect.style.display = 'none';
            elements.dateRange.style.display = 'inline-block';
        }
    }
    
    // Date Range Picker 초기화
    function initDateRangePicker() {
        $(function() {
            $('#dateRange').daterangepicker({
                locale: { format: 'YYYY-MM-DD' },
                startDate: moment().subtract(6, 'days'),
                endDate: moment(),
                maxDate: moment()
            }, function(start, end) {
                document.getElementById('dateRange').value =
                    start.format('YYYY-MM-DD') + ' ~ ' + end.format('YYYY-MM-DD');
                updateChartData();
            });
        });
    }
    
    // 차트 관련 이벤트 리스너 등록
    function setupChartEventListeners() {
        const elements = getElements();
        elements.granularitySelect.addEventListener('change', function() {
            updateChartGranularityUI();
            updateChartData();
        });
        elements.yearSelect.addEventListener('change', updateChartData);
        elements.monthSelect.addEventListener('change', updateChartData);
    }
    
    function init() {
        // 1) 테이블
        fetchAccessData('', 0);
        setupPaginationEvents();
        setupSearchEvent();
        
        // 2) 차트
        initChart();
        updateChartGranularityUI();
        initDateRangePicker();
        setupChartEventListeners();
        updateChartData();
    }
    
    return { init };
})();
 
document.addEventListener('DOMContentLoaded', function(){
    _GL.ACCESS.init();
});
