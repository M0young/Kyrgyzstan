package egovframework.main.admin.user.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import egovframework.common.component.MessageComponent;
import egovframework.common.response.ApiResponse;
import egovframework.main.admin.user.dto.AdminDTO;
import egovframework.main.admin.user.service.AdminService;
@RestController
@RequestMapping("/api/admin/user")
public class AdminController {

    @Resource(name = "adminService")
    private AdminService adminService;

    @Resource
    private MessageComponent messageComponent;

    @GetMapping("/list")
    public ResponseEntity<ApiResponse<List<AdminDTO>>> getAllUsers() {
        try {
            List<AdminDTO> users = adminService.selectAllUsers();
            return ApiResponse.success(users);
        } catch (Exception e) {
            return ApiResponse.error("Failed to fetch user data.");
        }
    }
    
    @GetMapping("/list/search")
    public ResponseEntity<ApiResponse<List<AdminDTO>>> searchUsers(
        @RequestParam(value = "query", required = false) String query) {
        try {
            List<AdminDTO> users = adminService.selectUsersBySearch(query);
            return ApiResponse.success(users);
        } catch (Exception e) {
            e.printStackTrace();
            return ApiResponse.error("Failed to fetch search results.");
        }
    }
    
    @GetMapping("/list/paged")
    public ResponseEntity<ApiResponse<Map<String, Object>>> getPagedUsers(
        @RequestParam(value = "page", defaultValue = "0") int page,
        @RequestParam(value = "size", defaultValue = "10") int size,
        @RequestParam(value = "query", required = false) String query) {
        try {
            int offset = page * size;

            // 전체 사용자 수 가져오기
            int totalUsers = adminService.countAllUsers();

            // 페이지별 사용자 가져오기
            List<AdminDTO> pagedUsers = adminService.selectPagedUsers(offset, size, query);

            // 결과를 Map으로 반환
            Map<String, Object> result = new HashMap<>();
            result.put("total", totalUsers); // 전체 사용자 수
            result.put("users", pagedUsers); // 현재 페이지 사용자 목록

            return ApiResponse.success(result);
        } catch (Exception e) {
            e.printStackTrace();
            return ApiResponse.error("Failed to fetch paged results.");
        }
    }

    
    @PostMapping("/update")
    public ResponseEntity<ApiResponse<Void>> updateUser(@RequestBody AdminDTO user) {
        try {
            adminService.updateUser(user);
            return ApiResponse.success(null, "User updated successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            return ApiResponse.error("Failed to update user.");
        }
    }

    @PostMapping("/delete")
    public ResponseEntity<ApiResponse<Void>> deleteUser(@RequestBody AdminDTO user) {
        try {
            adminService.deleteUser(user.getEml());
            return ApiResponse.success(null, "User deleted successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            return ApiResponse.error("Failed to delete user.");
        }
    }   
    
    @GetMapping("/groups")
    public ResponseEntity<ApiResponse<List<AdminDTO>>> selectUserGroups() {
    	try {
			List<AdminDTO> groups = adminService.selectUserGroups();
			return ApiResponse.success(groups);
		} catch (Exception e) {
			return ApiResponse.error("Failed to fetch user groups");
		}
    }
    
}