/*========================================================
    DATE: 2024. 02
    AUTHOR: MOYOUNG
    DESC: Map Edit Module
========================================================*/
_GL.MAP_EDIT = (function() {
    'use strict';

    let initialized = false;

    // 모듈 상태 관리
    let instance = null;
    let editMode = null;
    let currentEditLayer = null;

    // OpenLayers 객체
    let editSource = null;
    let editLayer = null;
    let drawInteraction = null;
    let modifyInteraction = null;
    let selectInteraction = null;

    // 이벤트 리스너와 히스토리 관리
    const eventListeners = { draw: null, modify: null, select: null };
    const history = { undoStack: [], redoStack: [] };

    /**
     * DOM 요소 가져오기
     */
    function getElements() {
        return {
            layerType: document.getElementById('editLayerType'),
            startBtn: document.getElementById('editStartBtn'),
            stopBtn: document.getElementById('editStopBtn'),
            undoBtn: document.getElementById('editUndoBtn'),
            redoBtn: document.getElementById('editRedoBtn'),
            drawModeBtn: document.getElementById('drawModeBtn'),
            modifyModeBtn: document.getElementById('modifyModeBtn'),
            removeModeBtn: document.getElementById('removeModeBtn'),
            saveBtn: document.getElementById('editSaveBtn'),
            discardBtn: document.getElementById('editDiscardBtn')
        };
    }
    
    /**
     * UI 상태 초기화
     */
    function initializeUIState() {
        const elements = getElements();
        
        // 초기에는 레이어 선택만 활성화
        elements.layerType.disabled = false;
        elements.startBtn.disabled = !elements.layerType.value;
        
        // 나머지 모든 컨트롤 비활성화
        elements.stopBtn.disabled = true;
        elements.undoBtn.disabled = true;
        elements.redoBtn.disabled = true;
        elements.drawModeBtn.disabled = true;
        elements.modifyModeBtn.disabled = true;
        elements.removeModeBtn.disabled = true;
        elements.saveBtn.disabled = true;
        elements.discardBtn.disabled = true;
    }
    
    /**
     * 편집 레이어 초기화
     */
    function initializeEditLayer() {
        editSource = new ol.source.Vector();
        editLayer = new ol.layer.Vector({
            source: editSource,
            style: new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(255, 255, 255, 0.4)'
                }),
                stroke: new ol.style.Stroke({
                    color: '#ffcc33',
                    width: 2
                }),
                image: new ol.style.Circle({
                    radius: 7,
                    fill: new ol.style.Fill({
                        color: '#ffcc33'
                    })
                })
            }),
            name: 'editLayer'
        });
        instance.addLayer(editLayer);
    }

    /**
     * 편집 상호작용 초기화
     */
    function initializeInteractions() {
        removeInteractions();

        drawInteraction = new ol.interaction.Draw({
            source: editSource,
            type: 'Polygon',
            geometryName: 'geom'
        });
        eventListeners.draw = event => {
            addToHistory('insert', event.feature);
        };
        drawInteraction.on('drawend', eventListeners.draw);

        modifyInteraction = new ol.interaction.Modify({
            source: editSource,
            pixelTolerance: 10,
            geometryName: 'geom'
        });
        eventListeners.modify = event => {
            event.features.forEach(feature => {
                const originalFeature = feature.clone();
                if (!feature.getId()) {
                    feature.setId(Date.now().toString());
                }
                addToHistory('update', feature, originalFeature.getGeometry());
            });
        };
        modifyInteraction.on('modifyend', eventListeners.modify);

        selectInteraction = new ol.interaction.Select();
        eventListeners.select = handleRemove;
        selectInteraction.on('select', eventListeners.select);

        // 상호작용 추가 및 비활성화
        [drawInteraction, modifyInteraction, selectInteraction].forEach(interaction => {
            instance.addInteraction(interaction);
            interaction.setActive(false);
        });
    }

    /**
     * 편집 상호작용 제거
     */
    function removeInteractions() {
        if (drawInteraction && eventListeners.draw) {
            drawInteraction.un('drawend', eventListeners.draw);
            drawInteraction = null;
        }
        if (modifyInteraction && eventListeners.modify) {
            modifyInteraction.un('modifyend', eventListeners.modify);
            modifyInteraction = null;
        }
        if (selectInteraction && eventListeners.select) {
            selectInteraction.un('select', eventListeners.select);
            selectInteraction = null;
        }
    }
    
/* =====================================================
    Event Listeners
======================================================*/   
    /**
     * 편집 모드 설정
     * UI: draw/modify/remove
     * WFS: insert/update/delete
     */
    function setEditMode(mode) {
        [drawInteraction, modifyInteraction, selectInteraction].forEach(interaction => {
            interaction.setActive(false);
        });

        editMode = mode;
        
        switch(mode) {
            case 'draw':
                drawInteraction.setActive(true);
                break;
            case 'modify':
                modifyInteraction.setActive(true);
                break;
            case 'remove':
                selectInteraction.setActive(true);
                break;
        }
    }
    
    /**
     * UI 상태 업데이트
     */
    function updateUIState() {
        const elements = getElements();
        const hasChanges = history.undoStack.length > 0;
        
        // Undo/Redo 버튼
        elements.undoBtn.disabled = history.undoStack.length === 0;
        elements.redoBtn.disabled = history.redoStack.length === 0;
        
        // 저장/취소 버튼
        if (!elements.stopBtn.disabled) {
            // 편집 중에는 저장/취소 비활성화
            elements.saveBtn.disabled = true;
            elements.discardBtn.disabled = true;
        } else {
            // 편집 중지 상태에서는 변경사항 있을 때만 활성화
            elements.saveBtn.disabled = !hasChanges;
            elements.discardBtn.disabled = !hasChanges;
        }
    }

    function resetEditState() {
        const elements = getElements();
        
        // 모든 상태 초기화
        history.undoStack = [];
        history.redoStack = [];
        editSource.clear();
        
        // UI 초기 상태로
        elements.startBtn.disabled = false;
        elements.layerType.disabled = false;
        elements.saveBtn.disabled = true;
        elements.discardBtn.disabled = true;
        
        updateUIState();
    }
    
    /**
     * WFS 요청으로 피처 로드
     */
    function loadLayerFeatures(layerId) {
    	if (!layerId) {
            _GL.COMMON.showToast('Invalid layer ID', 'error');
            return Promise.reject(new Error('Invalid layer ID'));
        }
    	
        const wfsUrl = new URL(window.location.origin + _GL.MAP_CONFIG.URLS.WFS);
        wfsUrl.searchParams.append('service', 'WFS');
        wfsUrl.searchParams.append('version', '1.1.0');
        wfsUrl.searchParams.append('request', 'GetFeature');
        wfsUrl.searchParams.append('typeName', `klums:${layerId}`);
        wfsUrl.searchParams.append('outputFormat', 'application/json');
        wfsUrl.searchParams.append('srsName', 'EPSG:3857');

        console.log('WFS Request URL:', wfsUrl.toString());

        fetch(wfsUrl)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (!data.features) {
                    throw new Error('No features in response');
                }

                const features = new ol.format.GeoJSON().readFeatures(data, {
                    featureProjection: 'EPSG:3857'
                });

                editSource.clear();
                features.forEach(feature => {
                    editSource.addFeature(feature);
                });
                editLayer.setVisible(true);
            })
            .catch(error => {
                console.error('Error loading features:', error);
                _GL.COMMON.showToast(`Failed to load features: ${error.message}`, 'error');
            });
    }

    /**
     * WFS 트랜잭션 전송
     */
    function sendWFSTransaction(changes) {
    	if (!changes || changes.length === 0) {
            return Promise.reject(new Error('No changes to save'));
        }
    	
        return new Promise((resolve, reject) => {
            const formatWFS = new ol.format.WFS();

            const transOptions = {
                featureNS: 'http://klums',
                featurePrefix: 'klums',
                featureType: currentEditLayer,
                srsName: 'EPSG:3857',
                version: '1.1.0',
                geometryName: 'geom'
            };

            let features = {
        		insert: [],
        		update: [],
                delete: []
            };

            changes.forEach(change => {
                switch (change.type) {
                    case 'insert':
                        features.insert.push(change.feature);
                        break;
                    case 'update':
                        features.update.push(change.feature);
                        break;
                    case 'delete':
                        features.delete.push(change.feature);
                        break;
                }
            });

            const transactionXml = formatWFS.writeTransaction(
                features.insert,
                features.update,
                features.delete,
                transOptions
            );

            let serializedXml = new XMLSerializer().serializeToString(transactionXml);
            serializedXml = serializedXml.replace(/<Name>geometry<\/Name>/g, '<Name>geom</Name>');
            
            console.log('Transaction XML:', serializedXml);

            fetch(_GL.MAP_CONFIG.URLS.WFS, {
                method: 'POST',
                headers: {
                    'Content-Type': 'text/xml',
                    'X-CSRF-TOKEN': _GL.csrf.token
                },
                body: serializedXml
            })
            .then(response => response.text().then(text => {
                if (!response.ok || text.includes('Exception') || text.includes('Error')) {
                    console.error('Server error response:', text);
                    throw new Error(`WFS Transaction failed: ${response.status}\nResponse: ${text}`);
                }
                console.log('Transaction response:', text);
                resolve(text);
            }))
            .catch(error => {
                console.error('Transaction error:', error);
                reject(error);
            });
        });
    }
    
    /**
     * 모듈 정리
     */
    function cleanup() {
        removeInteractions();
        if (editLayer) {
            instance.removeLayer(editLayer);
            editLayer = null;
        }
    }
    
    /**
     * 히스토리에 변경사항 추가
     */
    function addToHistory(type, feature, originalGeometry = null) {
        const clonedFeature = feature.clone();
        const featureId = feature.getId();
        
        if (!featureId) {
            console.warn('Feature has no ID');
            return;
        }
        
        clonedFeature.setId(featureId);
        
        const change = {
            type: type,
            feature: clonedFeature,
            timestamp: Date.now(),
            originalGeometry: originalGeometry || feature.getGeometry().clone()
        };

        console.log('Adding to history:', {
            type: type,
            featureId: featureId,
            hasOriginalGeometry: !!originalGeometry
        });

        history.undoStack.push(change);
        history.redoStack = [];
        updateUIState();
    }
    
    /**
     * 피처 변경 적용
     */
    function applyFeatureChange(change, isUndo = false) {
    	const featureId = change.feature.getId();
        if (!featureId) {
            console.error('Feature ID is missing');
            return;
        }

        const feature = editSource.getFeatureById(featureId);
        if (!feature && change.type !== 'insert') {
            console.error('Feature not found:', featureId);
            return;
        }

        console.log('Applying change:', {
            type: change.type,
            isUndo: isUndo,
            featureId: featureId,
            found: !!feature
        });
        
        switch(change.type) {
	        case 'insert':
	            if (isUndo) {
	                if (feature) editSource.removeFeature(feature);
	            } else {
	                const newFeature = change.feature.clone();
	                newFeature.setId(featureId);
	                editSource.addFeature(newFeature);
	            }
	            break;
	            
	        case 'update':
	            if (feature) {
	                if (isUndo) {
	                    feature.setGeometry(change.originalGeometry.clone());
	                } else {
	                    feature.setGeometry(change.feature.getGeometry().clone());
	                }
	                editSource.dispatchEvent('changefeature');
	            }
	            break;
	            
	        case 'delete':
	            if (isUndo) {
	                const restoredFeature = change.feature.clone();
	                restoredFeature.setId(featureId);
	                editSource.addFeature(restoredFeature);
	            } else {
	                if (feature) editSource.removeFeature(feature);
	            }
	            break;
	    }
    }

/* =====================================================
    Event Handlers
======================================================*/
    function handleEditStart() {
        const elements = getElements();
        if (!elements.layerType.value) {
            _GL.COMMON.showToast('Please select a layer type', 'warning');
            return;
        }

        currentEditLayer = elements.layerType.value;
        
        // WFS 데이터 로드
        _GL.MAP.setLayerVisibility(currentEditLayer, false);
        loadLayerFeatures(currentEditLayer);

        // UI 상태 업데이트
        elements.startBtn.disabled = true;
        elements.layerType.disabled = true;
        
        // 편집 컨트롤 활성화
        elements.stopBtn.disabled = false;
        elements.drawModeBtn.disabled = false;
        elements.modifyModeBtn.disabled = false;
        elements.removeModeBtn.disabled = false;
        
        // Draw 모드로 시작
        elements.drawModeBtn.checked = true;
        setEditMode('draw');

        // 변경사항이 있을 때만 저장/취소 버튼 활성화 (History 기반)
        updateUIState();
    }

    function handleEditStop() {
        const elements = getElements();
        
        if (history.undoStack.length > 0) {
            // 변경사항이 있는 경우
            elements.saveBtn.disabled = false;
            elements.discardBtn.disabled = false;
            elements.startBtn.disabled = true;
        } else {
            // 변경사항이 없는 경우
            elements.startBtn.disabled = false;
            elements.saveBtn.disabled = true;
            elements.discardBtn.disabled = true;
            elements.layerType.disabled = false;
        }

        // 편집 도구 비활성화
        elements.stopBtn.disabled = true;
        elements.drawModeBtn.disabled = true;
        elements.modifyModeBtn.disabled = true;
        elements.removeModeBtn.disabled = true;
        
        setEditMode(null);
    }

    function handleUndo() {
        const change = history.undoStack.pop();
        if (change) {
            history.redoStack.push(change);
            applyFeatureChange(change, true);
            updateUIState();
        }
    }

    function handleRedo() {
        const change = history.redoStack.pop();
        if (change) {
            history.undoStack.push(change);
            applyFeatureChange(change, false);
            updateUIState();
        }
    }
    
    function handleRemove(event) {
        const selected = event.selected[0];
        if (selected) {
            if (confirm('Remove selected feature?')) {
                const clonedFeature = selected.clone();
                clonedFeature.setId(selected.getId());
                addToHistory('delete', clonedFeature);
                editSource.removeFeature(selected);
            }
        }
    }

    function handleSave() {
        if (history.undoStack.length === 0) {
            _GL.COMMON.showToast('No changes to save', 'warning');
            return;
        }

        sendWFSTransaction(history.undoStack)
            .then(() => {
                _GL.COMMON.showToast('Changes saved successfully', 'success');
                resetEditState();
            })
            .catch(error => {
                console.error('Save error:', error);
                _GL.COMMON.showToast('Failed to save changes: ' + error.message, 'error');
            });
    }

    function handleDiscard() {
    	if (confirm('Discard all changes?')) {
            history.undoStack = [];
            history.redoStack = [];
            editSource.clear();
            loadLayerFeatures(currentEditLayer);
            updateUIState();
            _GL.COMMON.showToast('Changes discarded', 'info');
        }
    }

/* =====================================================
    Event Listeners
======================================================*/
    function initializeEventListeners() {
        const elements = getElements();

        // 레이어 타입 선택 시 시작 버튼 상태 업데이트
        elements.layerType.addEventListener('change', () => {
            elements.startBtn.disabled = !elements.layerType.value;
        });
        
        // 편집 시작/종료
        elements.startBtn.addEventListener('click', handleEditStart);
        elements.stopBtn.addEventListener('click', handleEditStop);
        
        // Undo/Redo
        elements.undoBtn.addEventListener('click', handleUndo);
        elements.redoBtn.addEventListener('click', handleRedo);

        // 편집 모드 변경
        elements.drawModeBtn.addEventListener('change', () => setEditMode('draw'));
        elements.modifyModeBtn.addEventListener('change', () => setEditMode('modify'));
        elements.removeModeBtn.addEventListener('change', () => setEditMode('remove'));
        
        // 저장/취소
        elements.saveBtn.addEventListener('click', handleSave);
        elements.discardBtn.addEventListener('click', handleDiscard);
    }

    // public API
    return {
        init: function() {
            if (initialized) return;
            instance = _GL.MAP.getInstance();
            if (!instance) {
                console.error('Map instance not found');
                return;
            }
            initializeUIState();
            initializeEditLayer();
            initializeInteractions();
            initializeEventListeners();
            initialized = true;
        },
        destroy: function() {
            if (!initialized) return;
            cleanup();
            initialized = false;
        }
    };
})();

// DOM 로드 완료 시 초기화
document.addEventListener('DOMContentLoaded', function() {
    _GL.MAP_EDIT.init();
});